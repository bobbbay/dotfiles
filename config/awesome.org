#+SETUPFILE: ../misc/rethink.theme

* TODO Set terminal, editor and browser to global variables (e.g. EDITOR).

#+BEGIN_SRC lua :tangle "rc.lua"
  pcall(require, "luarocks.loader")
  
  local gears = require("gears")
  local awful = require("awful")
		require("awful.autofocus")
  
  local beautiful = require("beautiful")
  
  require("errors")
  
  terminal = "wezterm"
  browser = "nyxt"
  editor = "emacs"
  editor_cmd = terminal .. " -e " .. editor
  modkey = "Mod4"
  
  beautiful.init(gears.filesystem.get_configuration_dir() .. "theme.lua")
  
  require("settings")
#+END_SRC

Errors

#+BEGIN_SRC lua :tangle "errors.lua"
-- Default error reporting template

local naughty = require("naughty")

if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end
#+END_SRC

Theme

#+BEGIN_SRC lua :tangle "theme.lua"
----------------------------------------------------
------------- Bobbbay's Nord-ish theme -------------
-- Adapted from github:hmix/awesome-wm-nord-theme --
----- As well as the default Awesome theme ;) ------
----------------------------------------------------

local theme_assets = require("beautiful.theme_assets")
local xresources = require("beautiful.xresources")
local dpi = xresources.apply_dpi

local gfs = require("gears.filesystem")
local themes_path = gfs.get_themes_dir()
local config_path = gfs.get_configuration_dir()

local theme = {}

theme.font          = "Iosevka 8"

-- Colors
theme.fg_normal  = "#ECEFF4"
theme.fg_focus   = "#88C0D0"
theme.fg_urgent  = "#D08770"
theme.bg_normal  = "#2E3440"
theme.bg_focus   = "#3B4252"
theme.bg_urgent  = "#3B4252"
theme.bg_systray = theme.bg_normal

-- Borders
theme.useless_gap   = dpi(0)
theme.border_width  = dpi(1)
theme.border_normal = "#3B4252"
theme.border_focus  = "#4C566A"
theme.border_marked = "#D08770"

-- Titlebars
theme.titlebar_bg_focus   = "#3B4252"
theme.titlebar_bg_normal  = "#2E3440"

-- Gaps
theme.useless_gap = 5

-- Mouse
theme.mouse_finder_color = "#D08770"

-- Colors for widgets
theme.widget_main_color = "#88C0D0"
theme.widget_red = "#BF616A"
theme.widget_yellow = "#EBCB8B"
theme.widget_green = "#A3BE8C"
theme.widget_black = "#000000"
theme.widget_transparent = "#00000000"

-- Bling tabs
theme.tabbar_style = "modern"
theme.tabbar_font = "PragmataPro Mono Liga 8"
theme.tabbar_size = 35
theme.tabbar_bg_normal = "#2E3440"
theme.tabbar_fg_normal = "#D8DEE9"
theme.tabbar_bg_focus  = "#4C566A"
theme.tabbar_fg_focus  = "#88C0D0"

-- Generate taglist squares
local taglist_square_size = dpi(4)
theme.taglist_squares_sel = theme_assets.taglist_squares_sel(
    taglist_square_size, theme.fg_normal
)
theme.taglist_squares_unsel = theme_assets.taglist_squares_unsel(
    taglist_square_size, theme.fg_normal
)

theme.menu_submenu_icon = themes_path.."default/submenu.png"
theme.menu_height = dpi(15)
theme.menu_width  = dpi(100)

-- Generate Awesome icon
theme.awesome_icon = theme_assets.awesome_icon(
    theme.menu_height, theme.bg_focus, theme.fg_focus
)

-- Define the icon theme for application icons. If not set then the icons
-- from /usr/share/icons and /usr/share/icons/hicolor will be used.
theme.icon_theme = nil

return theme
#+END_SRC

Bar

#+BEGIN_SRC lua :tangle "settings/init.lua"
  require("settings.menu")
  require("settings.bar")
  require("settings.mouse")
  require("settings.keyboard")
  require("settings.wallpaper")
  require("settings.window")
  require("settings.scratchpad")
#+END_SRC

#+BEGIN_SRC lua :tangle "settings/keyboard.lua"
  local gears = require("gears")
  local awful = require("awful")
  local bling = require("modules.bling")
  
  local hotkeys_popup = require("awful.hotkeys_popup")
  
  local menubar = require("menubar")
  
  globalkeys = gears.table.join(
      awful.key({modkey}, "s", hotkeys_popup.show_help, {description = "show help", group = "awesome"}),
      awful.key({modkey}, "Escape", awful.tag.history.restore, {description = "go back", group = "tag"}),
      awful.key(
          {modkey},
          "j",
          function()
              awful.client.focus.byidx(1)
          end,
          {description = "focus next by index", group = "client"}
      ),
      awful.key(
          {modkey},
          "k",
          function()
              awful.client.focus.byidx(-1)
          end,
          {description = "focus previous by index", group = "client"}
      ),
      -- Layout manipulation
      awful.key(
          {modkey, "Shift"},
          "j",
          function()
              awful.client.swap.byidx(1)
          end,
          {description = "swap with next client by index", group = "client"}
      ),
      awful.key(
          {modkey, "Shift"},
          "k",
          function()
              awful.client.swap.byidx(-1)
          end,
          {description = "swap with previous client by index", group = "client"}
      ),
      awful.key(
          {modkey, "Control"},
          "j",
          function()
              awful.screen.focus_relative(1)
          end,
          {description = "focus the next screen", group = "screen"}
      ),
      awful.key(
          {modkey, "Control"},
          "k",
          function()
              awful.screen.focus_relative(-1)
          end,
          {description = "focus the previous screen", group = "screen"}
      ),
      awful.key({modkey}, "u", awful.client.urgent.jumpto, {description = "jump to urgent client", group = "client"}),
  
      -- Standard program
      awful.key(
          {modkey},
          "Return",
          function()
              awful.spawn(terminal)
          end,
          {description = "open a terminal", group = "launcher"}
      ),
      awful.key(
          {modkey},
          "\\",
          function()
              awful.spawn(browser)
          end,
          {description = "open a browser window", group = "launcher"}
      ),
      awful.key({modkey, "Control"}, "r", awesome.restart, {description = "reload awesome", group = "awesome"}),
      awful.key({modkey, "Shift"}, "q", awesome.quit, {description = "quit awesome", group = "awesome"}),
      awful.key(
          {modkey},
          "l",
          function()
              awful.tag.incmwfact(0.05)
          end,
          {description = "increase master width factor", group = "layout"}
      ),
      awful.key(
          {modkey},
          "h",
          function()
              awful.tag.incmwfact(-0.05)
          end,
          {description = "decrease master width factor", group = "layout"}
      ),
      awful.key(
          {modkey, "Shift"},
          "h",
          function()
              awful.tag.incnmaster(1, nil, true)
          end,
          {description = "increase the number of master clients", group = "layout"}
      ),
      awful.key(
          {modkey, "Shift"},
          "l",
          function()
              awful.tag.incnmaster(-1, nil, true)
          end,
          {description = "decrease the number of master clients", group = "layout"}
      ),
      awful.key(
          {modkey, "Control"},
          "h",
          function()
              awful.tag.incncol(1, nil, true)
          end,
          {description = "increase the number of columns", group = "layout"}
      ),
      awful.key(
          {modkey, "Control"},
          "l",
          function()
              awful.tag.incncol(-1, nil, true)
          end,
          {description = "decrease the number of columns", group = "layout"}
      ),
      awful.key(
          {modkey},
          "space",
          function()
              awful.layout.inc(1)
          end,
          {description = "select next", group = "layout"}
      ),
      awful.key(
          {modkey, "Shift"},
          "space",
          function()
              awful.layout.inc(-1)
          end,
          {description = "select previous", group = "layout"}
      ),
      awful.key(
          {modkey, "Control"},
          "n",
          function()
              local c = awful.client.restore()
              -- Focus restored client
              if c then
                  c:emit_signal("request::activate", "key.unminimize", {raise = true})
              end
          end,
          {description = "restore minimized", group = "client"}
      ),
  
      -- Prompt
      awful.key(
          {modkey},
          "r",
          function()
              awful.screen.focused().mypromptbox:run()
          end,
          {description = "run prompt", group = "launcher"}
      ),
      awful.key(
          {modkey},
          "x",
          function()
              awful.prompt.run {
                  prompt = "Run Lua code: ",
                  textbox = awful.screen.focused().mypromptbox.widget,
                  exe_callback = awful.util.eval,
                  history_path = awful.util.get_cache_dir() .. "/history_eval"
              }
          end,
          {description = "lua execute prompt", group = "awesome"}
      ),
  
      -- Menubar
      awful.key(
          {modkey},
          "p",
          function()
              awful.spawn("rofi -show run")
          end,
          {description = "show the menubar", group = "launcher"}
      ),
  
      -- Tabbed
      awful.key(
          {modkey},
          "t",
          function()
              bling.module.tabbed.pick_with_dmenu()
          end,
          {group = "Bling", description = "Enable tabbed mode"}
      ),
      awful.key(
          {modkey, "Shift"},
          "t",
          function()
              bling.module.tabbed.pop()
          end,
          {group = "Bling", description = "Remove window from tabbed mode"}
      ),
      awful.key(
          {modkey},
          "Tab",
          function()
              bling.module.tabbed.iter()
          end,
          {group = "Bling", description = "Iterate through tabbed windows"}
      )
  )
  
  clientkeys = gears.table.join(
      awful.key(
          {modkey},
          "f",
          function(c)
              c.fullscreen = not c.fullscreen
              c:raise()
          end,
          {description = "toggle fullscreen", group = "client"}
      ),
      awful.key(
          {modkey, "Shift"},
          "c",
          function(c)
              c:kill()
          end,
          {description = "close", group = "client"}
      ),
      awful.key(
          {modkey, "Control"},
          "space",
          awful.client.floating.toggle,
          {description = "toggle floating", group = "client"}
      ),
      awful.key(
          {modkey, "Control"},
          "Return",
          function(c)
              c:swap(awful.client.getmaster())
          end,
          {description = "move to master", group = "client"}
      ),
      awful.key(
          {modkey},
          "o",
          function(c)
              c:move_to_screen()
          end,
          {description = "move to screen", group = "client"}
      ),
      awful.key(
          {modkey},
          "n",
          function(c)
              -- The client currently has the input focus, so it cannot be
              -- minimized, since minimized clients can't have the focus.
              c.minimized = true
          end,
          {description = "minimize", group = "client"}
      ),
      awful.key(
          {modkey},
          "m",
          function(c)
              c.maximized = not c.maximized
              c:raise()
          end,
          {description = "(un)maximize", group = "client"}
      ),
      awful.key(
          {modkey, "Control"},
          "m",
          function(c)
              c.maximized_vertical = not c.maximized_vertical
              c:raise()
          end,
          {description = "(un)maximize vertically", group = "client"}
      ),
      awful.key(
          {modkey, "Shift"},
          "m",
          function(c)
              c.maximized_horizontal = not c.maximized_horizontal
              c:raise()
          end,
          {description = "(un)maximize horizontally", group = "client"}
      ),
  
      awful.key(
          {modkey, "Shift"},
          "s",
          function(c)
            term_scratch:toggle()
          end,
          {description = "(un)maximize horizontally", group = "client"}
      )
  )
  
  -- Bind all key numbers to tags.
  -- Be careful: we use keycodes to make it work on any keyboard layout.
  -- This should map on the top row of your keyboard, usually 1 to 9.
  for i = 1, 9 do
      globalkeys =
          gears.table.join(
          globalkeys,
          -- View tag only.
          awful.key(
              {modkey},
              "#" .. i + 9,
              function()
                  local screen = awful.screen.focused()
                  local tag = screen.tags[i]
                  if tag then
                      tag:view_only()
                  end
              end,
              {description = "view tag #" .. i, group = "tag"}
          ),
          -- Toggle tag display.
          awful.key(
              {modkey, "Control"},
              "#" .. i + 9,
              function()
                  local screen = awful.screen.focused()
                  local tag = screen.tags[i]
                  if tag then
                      awful.tag.viewtoggle(tag)
                  end
              end,
              {description = "toggle tag #" .. i, group = "tag"}
          ),
          -- Move client to tag.
          awful.key(
              {modkey, "Shift"},
              "#" .. i + 9,
              function()
                  if client.focus then
                      local tag = client.focus.screen.tags[i]
                      if tag then
                          client.focus:move_to_tag(tag)
                      end
                  end
              end,
              {description = "move focused client to tag #" .. i, group = "tag"}
          ),
          -- Toggle tag on focused client.
          awful.key(
              {modkey, "Control", "Shift"},
              "#" .. i + 9,
              function()
                  if client.focus then
                      local tag = client.focus.screen.tags[i]
                      if tag then
                          client.focus:toggle_tag(tag)
                      end
                  end
              end,
              {description = "toggle focused client on tag #" .. i, group = "tag"}
          )
      )
  end
  
  clientbuttons =
      gears.table.join(
      awful.button(
          {},
          1,
          function(c)
              c:emit_signal("request::activate", "mouse_click", {raise = true})
          end
      ),
      awful.button(
          {modkey},
          1,
          function(c)
              c:emit_signal("request::activate", "mouse_click", {raise = true})
              awful.mouse.client.move(c)
          end
      ),
      awful.button(
          {modkey},
          3,
          function(c)
              c:emit_signal("request::activate", "mouse_click", {raise = true})
              awful.mouse.client.resize(c)
          end
      )
  )
  
  root.keys(globalkeys)
  
#+END_SRC

#+BEGIN_SRC lua :tangle "settings/window.lua"
local awful = require("awful")
local beautiful = require("beautiful")
local gears = require("gears")
local bling = require("modules.bling")

-- Order of layouts
awful.layout.layouts = {
    bling.layout.centered,
    awful.layout.suit.floating,
}

-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.no_overlap+awful.placement.no_offscreen
     }
    },

    -- Floating clients.
    { rule_any = {
        instance = {
          "DTA",  -- Firefox addon DownThemAll.
          "copyq",  -- Includes session name in class.
          "pinentry",
        },
        class = {
          "Arandr",
          "Blueman-manager",
          "Gpick",
          "Kruler",
          "MessageWin",  -- kalarm.
          "Sxiv",
          "Tor Browser", -- Needs a fixed window size to avoid fingerprinting by screen size.
          "Wpa_gui",
          "veromix",
          "xtightvncviewer"},

        -- Note that the name property shown in xprop might be set slightly after creation of the client
        -- and the name shown there might not match defined rules here.
        name = {
          "Event Tester",  -- xev.
        },
        role = {
          "AlarmWindow",  -- Thunderbird's calendar.
          "ConfigManager",  -- Thunderbird's about:config.
          "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
        }
      }, properties = { floating = true }},

    -- Add titlebars to normal clients and dialogs
    { rule_any = {type = { "normal", "dialog" }
      }, properties = { titlebars_enabled = false }
    },

    -- Set Firefox to always map on the tag named "2" on screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { screen = 1, tag = "2" } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c)
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    -- if not awesome.startup then awful.client.setslave(c) end

    if awesome.startup
      and not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end

   -- Also, round the corners
   --  c.shape = function(cr,w,h)
   --     gears.shape.rounded_rect(cr,w,h,5)
   -- end
end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
#+END_SRC

#+BEGIN_SRC lua :tangle "settings/wallpaper.lua"
local awful = require("awful")
local bling = require("modules.bling")

awful.screen.connect_for_each_screen(function(s)  -- that way the wallpaper is applied to every screen
    bling.module.tiled_wallpaper("λ", s, {        -- call the actual function ("λ" is the string that will be tiled)
        fg = "#ECEFF4",  -- define the foreground color
        bg = "#4C566A",  -- define the background color
        offset_y = 25,   -- set a y offset
        offset_x = 25,   -- set a x offset
        font = "PragmataPro Mono Liga",   -- set the font (without the size)
        font_size = 14,  -- set the font size
        padding = 100,   -- set padding (default is 100)
        zickzack = true  -- rectangular pattern or criss cross
    })
end)
#+END_SRC

#+BEGIN_SRC lua :tangle "settings/bar.lua"
  local gears = require("gears")
  local awful = require("awful")
  local wibox = require("wibox")
  local beautiful = require("beautiful")
  local bling = require("modules.bling")
  
  -- Widgets
  local batteryarc_widget = require("modules.awesome-wm-widgets.batteryarc-widget.batteryarc")
  local spotify_widget = require("modules.awesome-wm-widgets.spotify-widget.spotify")
  
  -- Keyboard status
  mykeyboardlayout = awful.widget.keyboardlayout()
  
  -- Create a textclock widget
  mytextclock = wibox.widget.textclock()
  
  -- Create a wibox for each screen and add it
  local taglist_buttons = gears.table.join(
		      awful.button({ }, 1, function(t) t:view_only() end),
		      awful.button({ modkey }, 1, function(t)
						if client.focus then
						    client.focus:move_to_tag(t)
						end
					    end),
		      awful.button({ }, 3, awful.tag.viewtoggle),
		      awful.button({ modkey }, 3, function(t)
						if client.focus then
						    client.focus:toggle_tag(t)
						end
					    end),
		      awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
		      awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
		  )
  
  local tasklist_buttons = gears.table.join(
		       awful.button({ }, 1, function (c)
						if c == client.focus then
						    c.minimized = true
						else
						    c:emit_signal(
							"request::activate",
							"tasklist",
							{raise = true}
						    )
						end
					    end),
		       awful.button({ }, 3, function()
						awful.menu.client_list({ theme = { width = 250 } })
					    end),
		       awful.button({ }, 4, function ()
						awful.client.focus.byidx(1)
					    end),
		       awful.button({ }, 5, function ()
						awful.client.focus.byidx(-1)
					    end))
  
  awful.screen.connect_for_each_screen(function(s)
      -- Each screen has its own tag table.
      local names = { "main", "www", "3", "4", "5" }
      local l = bling.layout
      local layouts = { l.centered, l.centered, l.mstab, l.equalarea, l.centered }
      awful.tag(names, s, layouts)
  
      -- Create a promptbox for each screen
      s.mypromptbox = awful.widget.prompt()
      -- Create an imagebox widget which will contain an icon indicating which layout we're using.
      -- We need one layoutbox per screen.
      s.mylayoutbox = awful.widget.layoutbox(s)
      s.mylayoutbox:buttons(gears.table.join(
			     awful.button({ }, 1, function () awful.layout.inc( 1) end),
			     awful.button({ }, 3, function () awful.layout.inc(-1) end),
			     awful.button({ }, 4, function () awful.layout.inc( 1) end),
			     awful.button({ }, 5, function () awful.layout.inc(-1) end)))
      -- Create a taglist widget
      s.mytaglist = awful.widget.taglist {
	  screen  = s,
	  filter  = awful.widget.taglist.filter.all,
	  buttons = taglist_buttons
      }
  
      -- Create a tasklist widget
      s.mytasklist = awful.widget.tasklist {
	  screen  = s,
	  filter  = awful.widget.tasklist.filter.currenttags,
	  buttons = tasklist_buttons
      }
  
      -- Create the wibox
      s.mywibox = awful.wibar({ position = "top", screen = s })
  
      -- Add widgets to the wibox
      s.mywibox:setup {
	  layout = wibox.layout.align.horizontal,
	  { -- Left widgets
	      layout = wibox.layout.fixed.horizontal,
	      mylauncher,
	      s.mytaglist,
	      s.mypromptbox,
	  },
	  s.mytasklist, -- Middle widget
	  { -- Right widgets
	      layout = wibox.layout.fixed.horizontal,
              spotify_widget(),
	      batteryarc_widget(),
	      mykeyboardlayout,
	      wibox.widget.systray(),
	      mytextclock,
	  },
      }
  end)
#+END_SRC

#+BEGIN_SRC lua :tangle "settings/menu.lua"
  local awful = require("awful")
  local beautiful = require("beautiful")
  local menubar = require("menubar")
  local hotkeys_popup = require("awful.hotkeys_popup")
  
  -- Create a launcher widget and a main menu
  myawesomemenu = {
      {"hotkeys", function()
	      hotkeys_popup.show_help(nil, awful.screen.focused())
	  end},
      {"manual", terminal .. " -e man awesome"},
      {"edit config", editor_cmd .. " " .. awesome.conffile},
      {"restart", awesome.restart},
      {"quit", function()
	      awesome.quit()
	  end}
  }
  
  mymainmenu =
      awful.menu(
      {
	  items = {
	      {"awesome", myawesomemenu, beautiful.awesome_icon},
	      {"open terminal", terminal}
	  }
      }
  )
  
  mylauncher =
      awful.widget.launcher(
      {
	  image = beautiful.awesome_icon,
	  menu = mymainmenu
      }
  )
  
  menubar.utils.terminal = terminal
#+END_SRC

#+BEGIN_SRC lua :tangle "settings/mouse.lua"
local gears = require("gears")
local awful = require("awful")

root.buttons(gears.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    c:emit_signal("request::activate", "mouse_enter", {raise = false})
end)
#+END_SRC

* Scratchpad

#+begin_src lua :tangle "settings/scratchpad.lua"
  local bling = require("modules.bling")
  
  term_scratch = bling.module.scratchpad:new {
    command = "wezterm start --class spad",
    rule = { instance = "spad" },
    sticky = true,
    floating = false,
    geometry = {x=360, y=90, height=900, width=1200},
    reapply = true
  }
#+end_src
